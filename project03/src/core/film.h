#ifndef FILM_H
#define FILM_H

#include "rt3.h"
#include "error.h"
#include "buffer.h"
#include "paramset.h"

namespace rt3 {

    /// Represents an image generated by the ray tracer.
    class Film {
        public:
            /// Color buffer alias.
            typedef Buffer< unsigned char > ColorBuffer;

            /// List of support image file formats.
            enum class image_type_e : int { PNG=0, PPM3, PPM6 };

            //=== Film Public Methods
            /*!
             * @param resolution Overall resolution of the image in pixels.
             * @param crop_window Subset of the image to render, given in NDC space.
             *  This means two points, P0 and P1, where P0 is the top-left corner
             *  and P1 is the bottom-right corner, having coord values in [0,1].
             * @param filter An object representing the filter function.
             * @param filenam Name of the output file the image will be written to.
             * @param it The image type (PNG, PPM, etc.)
             * @gamma_corrected Inidication whether to gamma correct the final image (in RGB).
             */
            Film( const Point2i &resolution,
                  const std::string &filename, image_type_e it,
                  bool gamma_corrected=false );
            virtual ~Film();
            
            /// Retrieve original Film resolution.
            Point2i get_resolution() const { return m_full_resolution; };
            /// Takes a sample `p` and its radiance `L` and updates the image.
            void add_sample( const Point2f &, const ColorXYZ & );
            void write_image() const;

            //=== Film Public Data
            const Point2i m_full_resolution;    //!< The image's full resolution values.
            std::string m_filename;       //!< Full path file name + extension.
            bool m_activate_gamma_correction;            //!< Gamma correction flag, requesting the correction if on.
            image_type_e image_type; //!< Image type, PNG, PPM3, PPM6.
            // std::unique_ptr< uint8_t[] > m_color_buffer; //!< Image memory area.
            std::unique_ptr< ColorBuffer > m_color_buffer_ptr; //!< Reference to the color buffer (image) object.
    };

    Film * create_film( const ParamSet &ps );
}  // namespace rt3

#endif  // FILM_H
